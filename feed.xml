<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-05-25T03:30:58-07:00</updated><id>http://localhost:4000/</id><title type="html">Sridhar Mocherla</title><subtitle>A profile of my academic projects, work experience and my brief thoughts on computer science problems. Website under construction
</subtitle><entry><title type="html">Interactive Parallel Coordinates</title><link href="http://localhost:4000/posts/2017/05/25/Interactive-Parallel-Coordinates.html" rel="alternate" type="text/html" title="Interactive Parallel Coordinates" /><published>2017-05-25T00:40:06-07:00</published><updated>2017-05-25T00:40:06-07:00</updated><id>http://localhost:4000/posts/2017/05/25/Interactive-Parallel-Coordinates</id><content type="html" xml:base="http://localhost:4000/posts/2017/05/25/Interactive-Parallel-Coordinates.html">&lt;p&gt;In my &lt;a href=&quot;https://srmocher.github.io/posts/2017/05/20/Scatterplot-matrices-using-openFrameworks.html&quot;&gt;previous&lt;/a&gt; post, I talked about using Scatterplot Matrices (SPLOMs) to visualize multi-dimensional quantitative data using a grid of scatterplots. With growing number of attributes, this approach becomes unsuitable both for rendering and interpretation - the scatterplots are made smaller to accommodate which consequently makes it harder for the user to interpret as the data points in an individual scatterplot become occluded. If there are more than 4-5 attributes, then an alternative to SPLOMs is required. To this end, Parallel Coordinates scale well to higher dimensions without the defects of SPLOMs.&lt;/p&gt;

&lt;p&gt;Parallel Coordinates employ a parallel layout (in contrast to the rectilinear layout in SPLOMs) where each dimension is represented as a vertical axis and all the axes are equally spaced. Data points are represented by lines passing through all the axes at corresponding values. If lines between two axes are crossed, then it generally indicates negative correlation.&lt;/p&gt;

&lt;p&gt;But parallel coordinates, in static form do not offer enough tools for the user to discover all possible relationships/trends between attributes. There are many different useful interactions that can be implemented, I discuss 3 such interactions implemented that greatly help in deciphering trends/relationships - &lt;strong&gt;Brushing with filtering and interactive legends, axis inversion and axis reordering&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Brushing with filtering is done through a rectangular selection on one ore more axis. Only lines contained in the selection for that axes are displayed across all the axes. Further filters, if added will filter only on the data being displayed. Interactive legends are a form of &lt;strong&gt;scented widgets&lt;/strong&gt; which present visual cues about the data being displayed. Here, legends get updated when filtering is done. Axis inversion inverts the scale for the selected axis (top to bottom or vice versa). Axis reordering is a very important interaction that allows the user to drag and reorder axes. Its significance lies in the fact that it gives user the flexibility to choose any attributes of his/her choice and observe the relationship between them.&lt;/p&gt;

&lt;p&gt;Another aspect that I have dealt with here is with missing data - no data for a particular attribute in a row. A special missing data horizontal axes is created at the below all the data axes and data points having missing attribute values will have lines intersecting this special axis below the data axes for whom it possessed no value.&lt;/p&gt;

&lt;p&gt;As before, we use C++ based library openFrameworks for rendering the interactive parallel coordinates visualization. The C++ class abstraction looks something like below&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ParallelPlot&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axisLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CatColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;colors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mappedColumns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drawLabels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drawAxes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drawPoints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drawRange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drawSelection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resetPoints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reorderAxes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// reordering axes
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drawLegend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;invertAxis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// inversion of axis
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mapData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;checkFilterExists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setupColorMapForCategories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;showSelectedPoints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ofColor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getColorForRow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// get color for row based on category
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;CatColor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getCatColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// coloring for legend
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setCatColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CatColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x_pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y_pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registeredEvents&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;leftPressed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selectionStartX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selectionStartY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selectionEndX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selectionEndY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;selectableColumnIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;columnDraggedIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;canSelectionStart&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;canDrawSelection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dragging&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;columnDragged&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentColInitialPosition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;legendColumnIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numCategorical&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numCategoricalAttributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ofColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;colorMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generateColors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isPointFiltered&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// point part of the filtered data or not
&lt;/span&gt;   
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// bootstrap method
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mouseMoved&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ofMouseEventArgs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mouseDragged&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ofMouseEventArgs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mousePressed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ofMouseEventArgs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mouseReleased&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ofMouseEventArgs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mouseScrolled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ofMouseEventArgs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mouseEntered&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ofMouseEventArgs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mouseExited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ofMouseEventArgs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The method names are mostly self-explanatory as to their functionality.&lt;/p&gt;

&lt;p&gt;The resulting interactive visualization is illustrated below for Cars dataset through an animated GIF below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/parallelcoordinates.gif&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/srmocher/of-ParallelCoordinates&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">In my previous post, I talked about using Scatterplot Matrices (SPLOMs) to visualize multi-dimensional quantitative data using a grid of scatterplots. With growing number of attributes, this approach becomes unsuitable both for rendering and interpretation - the scatterplots are made smaller to accommodate which consequently makes it harder for the user to interpret as the data points in an individual scatterplot become occluded. If there are more than 4-5 attributes, then an alternative to SPLOMs is required. To this end, Parallel Coordinates scale well to higher dimensions without the defects of SPLOMs.</summary></entry><entry><title type="html">Scatterplot matrices using openFrameworks</title><link href="http://localhost:4000/posts/2017/05/20/Scatterplot-matrices-using-openFrameworks.html" rel="alternate" type="text/html" title="Scatterplot matrices using openFrameworks" /><published>2017-05-20T20:36:06-07:00</published><updated>2017-05-20T20:36:06-07:00</updated><id>http://localhost:4000/posts/2017/05/20/Scatterplot-matrices-using-openFrameworks</id><content type="html" xml:base="http://localhost:4000/posts/2017/05/20/Scatterplot-matrices-using-openFrameworks.html">&lt;p&gt;In my first post, I will discuss a popular technique to visualize high dimensional quantitative data using &lt;strong&gt;Scatterplot Matrices (SPLOMs)&lt;/strong&gt; using a C++ creative coding library called &lt;strong&gt;openFrameworks&lt;/strong&gt;, which abstracts much of the rendering functionality using &lt;strong&gt;GLFW&lt;/strong&gt;, &lt;strong&gt;OpenGL&lt;/strong&gt; and other standard libraries. This helps a viz developer to solely focuse on designing and coding the required visualization and not worry about low-level OpenGL calls. openFrameworks also introduces the concept of “add-ons” which allows the community to develop their own pluggable components which can be leveraged by others. All openFrameworks projects are built using CMake and here we shall require an addon &lt;a href=&quot;https://github.com/BildPeter/ofxCMake&quot;&gt;ofxCMake&lt;/a&gt; for building the solution. For more information on using openFrameworks, follow this useful &lt;a href=&quot;http://openframeworks.cc/learning/#ofBook&quot;&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Scatterplots are 2-D plots which employ rectilinear layout to visualize relationship between two quantitative variables. For a multi-dimensional dataset, we would like to visualize the relationships between different pairs of attributes simultaneously. To this end, we build a “matrix” of scatterplots where each cell of the matrix is a scatterplot between the variables denoting that particular row and column. Without interaction, SPLOMs are fairely useless to find relationships especially if the dataset has thousands of instances.&lt;/p&gt;

&lt;p&gt;One key interaction implemented typically in SPLOMs is brushing with linked highlighting. This means a user can select a portion of data in a particular scatterplot using rectangular selection and the corresponding data points are selected in all the other scatterplots. Visually, this can be implemented by greying out the non-selected points and highlighting the selected points using a color.&lt;/p&gt;

&lt;p&gt;SPLOMs in viz terminology are also implementation of the “Small multiples” principles advocated by Edward Tufte. Coming back to the implementation of this in SPLOMs, we use a number of mouse event handlers and fairly straightforward draw calls to display the plots. For reading in the data, we implement a simple &lt;code class=&quot;highlighter-rouge&quot;&gt;TableReader&lt;/code&gt; class to read in the data and the attribute names.&lt;/p&gt;

&lt;p&gt;The end result looks something like below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/srmocher/of-SPLOMs/master/screenshots/A03P03ReportImg04.png&quot; alt=&quot;alt text&quot; title=&quot;Scatterplot matricues for Mileage dataset&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/srmocher/of-SPLOMs&quot;&gt;Source code&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">In my first post, I will discuss a popular technique to visualize high dimensional quantitative data using Scatterplot Matrices (SPLOMs) using a C++ creative coding library called openFrameworks, which abstracts much of the rendering functionality using GLFW, OpenGL and other standard libraries. This helps a viz developer to solely focuse on designing and coding the required visualization and not worry about low-level OpenGL calls. openFrameworks also introduces the concept of “add-ons” which allows the community to develop their own pluggable components which can be leveraged by others. All openFrameworks projects are built using CMake and here we shall require an addon ofxCMake for building the solution. For more information on using openFrameworks, follow this useful link.</summary></entry><entry><title type="html">Welcome to my homepage!</title><link href="http://localhost:4000/posts/2017/05/10/welcome-to-my-homepage.html" rel="alternate" type="text/html" title="Welcome to my homepage!" /><published>2017-05-10T15:36:06-07:00</published><updated>2017-05-10T15:36:06-07:00</updated><id>http://localhost:4000/posts/2017/05/10/welcome-to-my-homepage</id><content type="html" xml:base="http://localhost:4000/posts/2017/05/10/welcome-to-my-homepage.html">&lt;p&gt;Welcome to my homepage!&lt;/p&gt;

&lt;p&gt;I’m Sridhar. I’m currently pursuing my Master’s degree in Computer Science at The &lt;a href=&quot;https://www.cs.arizona.edu/&quot;&gt;University of Arizona&lt;/a&gt; since August 2016. I am also working as a Research Assistant on the &lt;a href=&quot;https://teachastronomy.com&quot;&gt;Teach Astronomy&lt;/a&gt; project at the &lt;a href=&quot;http://www.as.arizona.edu/&quot;&gt;Steward Observatory&lt;/a&gt;, The University of Arizona with my work focused on implementing machine learning classification algorithms to extract Astronomy content from the web. Prior to this, I obtained my Bachelor’s degree in Computer Science from Osmania University and worked for almost 2 years at Microsoft India as a Software Engineer and Service Engineer with a focus on developing enterprise integration software on cloud and building tools to improve infrastructure management for OEM platform.&lt;/p&gt;

&lt;p&gt;My interests and work lie in Web development, Computer Graphics, Data Visualization and Machine Learning. I try to write efficient code to achieve my goals.&lt;/p&gt;

&lt;p&gt;In the coming posts, I will be writing in brief about some of the interesting projects I have done as part of my coursework and professional experience.&lt;/p&gt;</content><author><name></name></author><summary type="html">Welcome to my homepage!</summary></entry></feed>